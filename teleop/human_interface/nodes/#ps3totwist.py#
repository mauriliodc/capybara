#!/usr/bin/env python
# encoding: utf-8


"""

"""
__author__ = "Caprinus"

###  Imports  ###

# ROS imports
import roslib; roslib.load_manifest('human_interface')
import rospy
import serial

# ROS msg and srv imports
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist

# Python Libraries
import sys
import traceback
import time


###SERIAL

ser = serial.Serial('/dev/ttyACM0', 115200)
ser.xonxoff = False
ser.rtscts = False
ser.dsrdtr = False
ser.open()
ser.isOpen()
print ser.portstr



###  Variables  ###
LINEAR_SPEED = 100
ANGULAR_SPEED = 100



def add_nulls(num, cnt=2):
	cnt = cnt - len(str(num))
	nulls = '0' * cnt
	return '%s%s' % (nulls, num)



header = "$"
footer = "%"
k1=2
k1=1/k1

k2=2
k=1/k2

class Joy2Twist(object):

	joyEnabled = True
	"""Joy2Twist ROS Node"""
	
  	def __init__(self):
		
	    	# Initialize the Node
	    	rospy.init_node("Joy2Twist")
		# Setup the Joy topic subscription
		self.joy_subscriber = rospy.Subscriber("joy", Joy, self.handleJoyMessage, queue_size=1)
		# Setup the Twist topic publisher
		self.twist_publisher = rospy.Publisher("cmd_vel", Twist)
		# Spin
		rospy.spin()
		
	def handleJoyMessage(self, data):
		
		"""Handles incoming Joy messages"""
		leftSpeed = data.axes[1] * LINEAR_SPEED
		rightSpeed = data.axes[2] * ANGULAR_SPEED
		command=""


		if data.buttons[14]==1:
			leftSpeed *= 2;
			rightSpeed *= 2;

		if data.buttons[15]==1:
			leftSpeed *= 0;
			rightSpeed *= 0;

		#print "L: "+str(leftSpeed)
		#print "W: "+str(rightSpeed)

		print "VR: "+k1*float(leftSpeed)+k2*float(rightSpeed)
		print "VL: "+k1*float(leftSpeed9-k2*float(rightSpeed)

				      ###  If Main  ###
				      if __name__ == '__main__':
					      try:
					      Joy2Twist()
				      except:
					      rospy.logerr("Unhandled Exception in the joy2Twist Node:+\n"+traceback.format_exc())
