#include "MalComm.h"
#include "serialStuff.h"
#include <stdio.h>

char bbb[255];
int main() {

  //SERIALE
  int serialFd=openPort("/dev/ttyACM0");
  printf("serial status %d\n",serialFd);
  initConsts();
  struct DummyPacket p;
  char returnData[255];
  p.field_1=1;
  p.field_2=2;
  p.field_3=3;
  p.field_4=4;
  p.field_5=5.5;
  p.field_6=200;
  p.field_7=70000;
  p.field_8=-30000;
  struct Packet pp;
  pp.id=DummyPacketID;
  pp.dummy=p;
  pp.seq=0;

  int ascii = 0;

int canIncrement=0;
struct PacketDecoder pDecoder;
DecoderInit(&pDecoder,ascii);
int complete = 0;
  while(1){
    /*
    usleep(10000);
    char* endPtr=writePacket(&pp,bbb,ascii);
    char* ptr = bbb;
    int len = endPtr-ptr;
    if(canIncrement){
      canIncrement=0;
      pp.seq++;
    }
    int k =0;
    printf("Sending packet with SEQ %d\n",pp.seq);
    while(k<len){
      write(serialFd,&bbb[k],1);
      k++;
      usleep(1000);
    }
    */
    //printf(".");
    char c;
    int bytesRead=0;
    while(read(serialFd, &c, 1)>0 && !complete){
      //printf("%02x",(unsigned char)c);
      complete = DecoderPutChar(&pDecoder,(unsigned char)c);
    }
    /*
    //int bytesRead=read(serialFd, returnData, 255);
    //printf("bytes read: %d\n",bytesRead);
    int cnt =0;
    while(cnt<bytesRead && !complete){
      complete = DecoderPutChar(&pDecoder,(unsigned char)returnData[cnt]);
      //printf("%x ",(unsigned char)returnData[cnt]);
      cnt++;
    }
    //printf("\n");
    */
    if(complete){
      parsePacket(pDecoder.buffer_start,&pp,ascii);
      //char printBuffer[255];
      writePacket(&pp,printBuffer,1);
      printf(" %s \n",printBuffer);

    }
    complete=0;
    fflush(stdout);
    /*
    printf("Decoder buffer:\n");
    int i =0;
    for(i =0;i<255;i++){
      printf("%x",(unsigned char)pDecoder.buffer_start[i]);
    }
    printf("\ncomplete? %d\n",complete);
    if(complete){
      complete=0;
      struct Packet p;
      parsePacket(pDecoder.buffer_start,&p,ascii);
      printf("\tseq: %ld \n",p.seq);
      if(p.seq==pp.seq){
        canIncrement=1;
      }
      printf("can increment: %d\n",canIncrement);
    }
    */
  }

return 0;
}
